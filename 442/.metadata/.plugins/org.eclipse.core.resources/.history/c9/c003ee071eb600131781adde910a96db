package edu.uic.soot.samples;


import soot.*;
import soot.jimple.*;
import soot.jimple.internal.JIfStmt;
import soot.tagkit.*;
import soot.toolkits.graph.*;
import soot.toolkits.graph.pdg.*;
import soot.toolkits.scalar.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class Analyzer extends BodyTransformer {

    // public static final Analyzer v = new Analyzer();
    // private Analyzer() {}

    @Override
    protected void internalTransform(Body body, String s, Map stringStringMap) {
        //print all defs for each local in each unit
//        printDefsForAllLocals(body);
    	printAllSimplePaths(body);
    }

    @SuppressWarnings("unused")
	private void printDefsForAllLocals(Body body) {

        UnitGraph cfg = new EnhancedUnitGraph(body);
        SimpleLocalDefs simpleLocalDefs = new SimpleLocalDefs(cfg);

        System.out.println("********************************************************************************");
        System.out.println(String.format("def-use chains in %s %s", body.getMethod(), body.getMethod().getDeclaringClass()));
        for (Unit u : body.getUnits()) {
            System.out.println("\tLocals in unit: " + u);
            for (Local l : getAllLocals(u)) {
                List<Unit> defsForLocal = getDefsOfLocal(simpleLocalDefs, u, l);
                {
                    System.out.print("\t\tLocal: " + l);
                    printSourceLineOfUnit(u);
                    printAllDefs(defsForLocal);
                }
            }
        }

    }

	private void printSourceLineOfUnit(Unit u) {
		SourceLnNamePosTag useTag = (SourceLnNamePosTag) u.getTag("SourceLnPosTag");
		if(useTag != null){
			System.out.println(" (line: " + useTag.startLn() + ")");
		}
		else {
			System.out.println();
		}
	}

	private void printAllDefs(List<Unit> defsForLocal) {
		for (Unit defUnit : defsForLocal) {
		    System.out.print("\t\t\tDef = " + defUnit);
		    printSourceLineOfUnit(defUnit);
		}
	}
    
    private void printAllSimplePaths(Body body) {

        BriefUnitGraph cfg = new BriefUnitGraph(body);
        
        System.out.println("********************************************************************************");
        System.out.println(String.format("Simple paths in %s %s", body.getMethod(), body.getMethod().getDeclaringClass()));
        for (Unit u : body.getUnits()) {
            System.out.println("\tSimple paths from unit: " + u);
            getAllSimplePathsFromUnit(cfg, u);
        }
    }

	private void getAllSimplePathsFromUnit(BriefUnitGraph cfg, Unit u) {
		if(u.branches()){
			for (Unit successor : cfg.getSuccsOf(u)){
				System.out.println("\t\tThe successors are: " + successor.toString());
			}
		}
		else {
			System.out.println("\t\tThis class is: " + u.getClass().getName());
		}
	}


    public List<Local> getAllLocals(Unit u) {
        List<Immediate> imm = getAllImmediates(u);
        List<Local> locals = new ArrayList<Local>();
        for (Immediate im : imm) {
            if (im instanceof Local) {
                locals.add((Local) im);
            }
        }

        if (u instanceof AssignStmt) {
            //We dont handle assignments to instance fields.
            if (((AssignStmt) u).getLeftOp() instanceof Local) {
                locals.add((Local) ((AssignStmt) u).getLeftOp());
            }
        }

        return locals;

    }


    // Gets only locals on rightOp
    public List<Immediate> getAllImmediates(Unit u) {
        List<Immediate> imm = new ArrayList<Immediate>();
        for (ValueBox vb : u.getUseBoxes()) {
            getAllImmediates(vb, imm);
        }

        return imm;
    }


    public void getAllImmediates(ValueBox vb, List<Immediate> imm) {
        if (vb.getValue() instanceof Immediate) {
            imm.add((Immediate) vb.getValue());
            return;
        }

        for (Object o : vb.getValue().getUseBoxes()) {
            ValueBox v = (ValueBox) o;
            getAllImmediates(v, imm);
        }


    } 

    public List<Unit> getDefsOfLocal(SimpleLocalDefs defs, Unit u, Local l) {
        if (defs.hasDefsAt(l, u)) {
            return defs.getDefsOfAt(l, u);
        } else {
            assert (u instanceof AssignStmt);
            List<Unit> defUnits = new ArrayList<Unit>();
            defUnits.add(u);
            return defUnits;
        }
    }
}
