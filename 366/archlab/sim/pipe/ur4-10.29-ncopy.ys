#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
		xorl %eax, %eax		# count = 0;
		iaddl $-4, %edx		# len <= 0?
		jl MLDone		# if so, goto Done:

Loop:		mrmovl (%ebx), %esi	# read val from src...
		mrmovl 4(%ebx), %edi	# read val from src...
		andl %esi, %esi		# val <= 0?
		rmmovl %esi, (%ecx)	# ...and store it to dst 
		rmmovl %edi, 4(%ecx)	# ...and store it to dst
		jle Npos1		# if so, goto Npos:
		iaddl $1, %eax		# count++
Npos1:		andl %edi, %edi         # val <= 0?
                jle Npos2               # if so, goto Npos2:
                iaddl $1, %eax          # count++

Npos2:           mrmovl 8(%ebx), %esi     # read val from src...
                 andl %esi, %esi         # val <= 0?
                 rmmovl %esi, 8(%ecx)     # ...and store it to dst 
                 jle Npos3               # if so, goto Npos:
                 iaddl $1, %eax          # count++       

Npos3:          mrmovl 12(%ebx), %esi    # read val from src...
                andl %esi, %esi         # val <= 0?
                rmmovl %esi, 12(%ecx)    # ...and store it to dst
                jle Npos4               # if so, goto Npos2:
                iaddl $1, %eax          # count++

Npos4:		iaddl $16, %ecx		# dst += 2
		iaddl $16, %ebx		# src += 2
		iaddl $-4, %edx		# len -= 2
		jg Loop			# if so, goto Loop:
		
MLDone:		iaddl $4, %edx		
		je Done
Loop2:		mrmovl (%ebx), %esi
		andl %esi, %esi
		jle NposX
		iaddl $1, %eax

NposX:		rmmovl %esi, (%ecx)
		iaddl $4, %ecx
		iaddl $4, %ebx
		iaddl $-1, %edx
		jg Loop2

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
